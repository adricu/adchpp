= ADCH++  Expert User Guide
Authors & contributors : Toast <toast@adcportal.com>, eMTee <emtee11@gmail.com>
Document Version 0.3.0
:toc:
This version of the guide corresponds with ADCH++ version: *2.8.0*

== Introduction

ADCH++ is a hub server software for the ADC network. It implements the http://dcplusplus.sf.net/ADC.html[ADC protocol]. The core application is very simple, but extensible using plugins.
Among the standard plugins there is a scripting plugin that allows hub owners to further customize the hub using the Lua scripting language. 
The core is also exposed as a Python and a Ruby module, thus it is possible to use it within a Python or Ruby application.

== Preface

This guide is intended for novice or expert users. It focuses on various scripting interfaces, compiling and running ADCH++ in service mode, as well as troubleshooting and bug reporting.

== Scripting Interface and examples

ADCH++ core is exposed to various scripting languages that either has direct access to the core or can use it as a plugin.

=== LUA Interface

By default ADCH\++ comes with prepackaged LUA scripts to handle the basic hub functions. These scripts themselves are very good examples of how to use the ADCH++ LUA API. You can also use following examlpe file to learn the basics:
---------------------------------------------------------------------
[source,lua]
include::..\..\plugins\Script\examples\example.lua[]
---------------------------------------------------------------------

The complete list of of the ADCH\++ LUA API functions are available both in the Docs folder in the ADCH\++ repository or at the http://adchpp.sourceforge.net/doc/lua_api.html[ADCH++ home page].

=== Ruby Interface

Example file using the Ruby interface:
---------------------------------------------------------------------
[source,ruby]
include::..\..\rbutil\adchpp.rb[]
---------------------------------------------------------------------

=== Python Interface

Example file using the Python interface:
---------------------------------------------------------------------
[source,python]
include::..\..\pyutil\adchpp.py[]
---------------------------------------------------------------------
 
== PtokaX API2 bridge for ADCH++

It's possible to create or use existing PtokaX API2 LUA scripts in your hub using the ADCHPP-PtokaX bridge script. The bridge is separately maintained and available to download at https://launchpad.net/adchpp-ptokax[its home page]. Before you go on make sure you read the documentation provided in the ADCHPP-PtokaX package.

CAUTION: To avoid problems make sure you use the revision of PtokaX bridge script corresponding to the ADCH++ version you run.

An example folder structure of a correctly installed ADCHPP-PtokaX bridge script and some native PtokaX scripts:
--------------------------------------

Directory of c:\users\username\adchpp\Scripts

2010-05-27  18:01    <DIR>          .
2010-05-27  18:01    <DIR>          ..
2010-05-03  22:58            58 383 access.lua
2010-05-03  22:58            18 483 access.bans.lua
2010-05-03  22:58             8 242 access.bot.lua
2010-05-03  22:58             9 385 access.limits.lua
2010-05-03  22:58            18 343 access.op.lua
2010-05-26  17:26            33 141 adchpp-ptokax.lua
2010-05-03  22:58             2 653 autil.lua
2010-05-03  22:58             3 699 example.lua
2010-05-03  22:58             3 003 history.lua
2010-05-03  22:58            15 808 json.lua
2010-05-03  22:58               742 motd.lua
2010-05-27  18:01    <DIR>          px
               8 File(s)        117 544 bytes

 Directory of c:\users\username\adchpp\Scripts\px

2010-05-27  18:01    <DIR>          .
2010-05-27  18:01    <DIR>          ..
2010-05-26  19:14             4 652 px_lastip.lua
2010-05-26  18:06            15 158 px_record.lua
2010-05-26  18:02             3 935 px_tagcheck.lua
2007-12-23  12:51            13 312 px_tophubbers.lua
2010-05-26  17:50             5 918 px_topshare.lua
               5 File(s)         62 491 bytes
--------------------------------------

You can configure the PtokaX scripts using the user commands provided by the bridge script (ADCH++-PtokaX submenu in the hub context menu of your ADC client). The usage is pretty straightforward eg. when you select 'Add a script' you will be asked where to load the scripts from. The default location is the Scripts folder so if you have the scripts in a subdirectory like in the example above then you can simply load them by specifying their relative path like (px/example_script.lua).

The bridge script will create a file named adchpp-ptokax.txt in the Config directory of the ADCH++ installation. This file lists the path of the currently added PtokaX scripts. You can edit the file to add multiple scripts in one go like in the following example (your structure may differ):

--------------------------------------
px\px_banner.lua
px\px_iprange.lua
px\px_change.lua
px\px_request.lua
px\px_rotating.lua
px\px_lastip.lua
px\px_rlsbot.lua
px\px_minchecker.lua
px\px_userdb.lua
px\px_pmfilter.lua
px\px_test.lua
px\px_profiles.lua
px\px_pmblock.lua
px\px_clock.lua
px\px_badsearch.lua
--------------------------------------

Some of the PtokaX scripts (like FreshStuff or Feedwatch) may require LUA filesystem or socket library. In case of any of these libraries needed they can be configured in the following way under Windows:

The Adchpp-PtokaX package contains the required libraries as precompiled .dll binaries. You should extract the libs to the directories indicated by each script (it could be the normal ADCH\++ dir or their own sub-dir). In general, where there should have been a px\*\*\*.dll file in an original PtokaX configuration, you want to put the corresponding \***.dll file instead. When a script asks you to put the files to "scripts/libs", you want to actually put them in the ADCH++ directory itself (next to the other binary files).

CAUTION: Make sure you use the .dlls corresponding to the compiler your ADCH\++ compiled with (If you are using the officially released version of ADCH++, then pick "release-mingw-x86" packages).

TIP: Linux users can found more information about library compilation and placement in the !readme.txt file provided in the "libs" folder of the Adchpp-PtokaX package.

This is the example of how the Freshstuff script should be correctly configured. Add the script as you would normally do with any scripts. The rest of the directory contents should look like this:

--------------------------------------
Directory of c:\users\username\adchpp\Scripts\px

2010-05-27  18:08    <DIR>          .
2010-05-27  18:08    <DIR>          ..
2010-05-26  18:31    <DIR>          freshstuff
2010-05-26  18:14             1 815 freshstuff.lua
2010-05-26  19:16            19 516 px_feedwatch.lua
2010-05-26  19:14             4 652 px_lastip.lua
2010-05-26  18:06            15 158 px_record.lua
2010-05-26  18:02             3 935 px_tagcheck.lua
2007-12-23  12:51            13 312 px_tophubbers.lua
2010-05-26  17:50             5 918 px_topshare.lua
               7 File(s)         64 306 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff

2010-05-26  18:31    <DIR>          .
2010-05-26  18:31    <DIR>          ..
2010-05-26  18:14    <DIR>          components
2010-05-26  18:14    <DIR>          config
2010-05-26  18:15    <DIR>          data
2010-05-26  18:14    <DIR>          docs
2010-05-26  18:14            24 155 kernel.lua
2010-05-26  18:42    <DIR>          lib
2010-05-26  18:14            12 010 ptokax.lua
2010-05-26  18:14             5 775 tables.lua
               3 File(s)         41 940 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\components

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14             3 503 extras.lua
2010-05-26  18:14            14 072 requester.lua
               2 File(s)         17 575 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\config

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14               987 extras.lua
2010-05-26  18:14             3 182 main.lua
2010-05-26  18:14               374 requester.lua
               3 File(s)          4 543 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\data

2010-05-26  18:15    <DIR>          .
2010-05-26  18:15    <DIR>          ..
2010-05-26  18:15               125 categories.dat
               1 File(s)            125 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\docs

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14             1 471 customprofile.txt
2010-05-26  18:14             4 350 development.txt
2010-05-26  18:14               201 INSTALL.txt
2010-05-26  18:14            16 755 license.txt
2010-05-26  18:14               735 README.txt
2010-05-26  18:14               644 TODO.txt
               6 File(s)         24 156 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\lib

2010-05-26  18:42    <DIR>          .
2010-05-26  18:42    <DIR>          ..
2010-05-13  16:14            13 824 lfs.dll
2010-05-13  16:14               616 lfs.dll.manifest
2010-05-26  18:14           138 240 PXLFS.dll
2010-05-26  18:14           262 144 PXLFS.tds
               4 File(s)        414 824 bytes
--------------------------------------

== Automatic spam protection: working with banmsgre

Banmsgre is a very powerful tool for getting rid of unwanted spam. It uses regular expressions for detecting unwanted chat content in your hub. It requires the knowledge of how to write a regular expression string.

  +banmsgre <regexp> <reason> <time>
 
.Example: Command Example
--------------------------------------
+banmsgre <http://www\.spam\.com> unwanted spam 99
--------------------------------------

For more information about regular expressions go to: http://www.regular-expressions.info/

== Running ADCH++ with parameters

This part is a quick run through of how to install ADCH++ as a service module instead of an application.

The following command line parameters are available:

.Example: Command usage
--------------------------------------
Usage: adchpp [[-c <configdir>] [-d]] | [-v] | [-h]
--------------------------------------
	
* -c Specifies the path of configuration directory (default: .\config)
* -d Deamon service _(Linux only)_
* -p <pid-file> Writes process pid to <pid-file> _(Linux only)_
* -i <service name> Installs a service instance. The name specifies the name the instance will have in the services list _(Windows only)_
* -u <service name> Uninstalls a service instance. _(Windows only)_
* -v Prints version number
* -h Shows the usage help message

.Varible example
[width="60%",]
|==============================================
|(Linux)	|adchppd -c /home/test/adchpp/bin/config/
|(Linux)	|adchppd -d
|(Linux)	|adchppd -p adchpp.pid
|(Windows)	|adchppd.exe -c c:/users/test/adchpp/bin/config/
|(Windows)	|adchppd.exe -i adchpp
|==============================================

Installing ADCH++ as a service requires to be run in an elevated state in Windows 7 or Vista as UAC will interfere with the process if its not executed as an administrator. 

This is how it looks in case of problems:

image:images/img_adch_elevated_fail.png["ADCH++ elevation fails"]

You elevate adchpp.exe in Windows 7/Vista in the following way:

* Right click on the application's icon
* Choose 'Properties'
* Go to 'Compatibility' tab

image:images/img_adch_elevated_howto.png["ADCH++ elevation howto"]

* Check the 'Run this program as an administrator' box. Click OK.
* Now execute the command adchpp - i <servicename> (example: adchpp.exe -i myserver) in your adchpp folder
* Grant the application access if you have UAC enabled

To verify that your ADCH\++ service is correctly installed under the name you specified go to Control Panel\System and Security\Administrative Tools or simply run the services.msc command from a Windows prompt.

image:images/img_adch_service_location.png["ADCH++ Services"]

To check if your adchpp service is running start the "services" application in administrative tools:

image:images/img_adch_service_verify.png["ADCH++ verify service"]
	
== Issues and problems

Like any other software ADCH\++ can have flaws or bugs, can preform weird or contain unwanted features. It's important to make the developers aware of such problems. If you want to help improving ADCH\++ you can give feedback to the developers about found bugs, helping them to recreate and fix the problems. 
Many times, to be able to help solving issues, you must run a debug build of ADCH+\+. If you cannot compile ADCH++ in debug mode you can download nightly debug builds from the http://builds.adcportal.com[ADCPortal Builds Archive].

=== Crashes and getting backtrace logs

In the case of a crash bug you can help the development by reporting the bug to the https://bugs.launchpad.net/adchpp[official bug tracker] 

To be able to analyze and solve a crash problem the developers need the following information:

- As many details as you can provide about your system including the version of ADCH++ used, OS version, etc.
- If you know how to reproduce the bug, specify a procedure that developers can follow to re-create the same bug.
- Provide a crash/backtrace log and attach it to your bug report.

==== Getting backtrace log from a GCC/MinGW compiled debug build

For getting the crash log you need to use a debugger software called GDB (GNU Debugger). GDB.exe is downloadable directly from <ftp://ftp.equation.com/gdb/32/gdb.exe>

- Copy the debugger program (GDB.exe) to your ADCH++ program folder
- Open a Windows Command prompt in the ADCH++ program folder (Start Menu, Run..., type 'cmd' and navigate to the program folder). You will get the debugging output to this command window.
- In the Command prompt type :

--------------------------------------
 gdb adchppd.exe
--------------------------------------

- When you get the debugger prompt type : r (then press <enter>).
- This will start ADCH++, now wait for the crash (or force the crash if you know the steps how to do so)
- When it crashes get the backtrace information by typing to the debugger prompt :

--------------------------------------
 bt full
--------------------------------------

- Press <enter> so the backtrace will be generated and printed to the debug console.
- Mark and copy the output from the command window (easiest way : right-click to the window header, from the menu choose Edit, Select All).
- Paste the output to a new text file.
- Then type : q (and press <enter>) to exit the debugger, this will close ADCH++ as well.

TIP: It's the backtrace itself what may contain the most useful information so you can remove the best part of the large debug printout from the beginning of the text file. The important part is in the end, starting 10-15 lines >before< the issued 'bt full' command and onwards. Also its wise to check if the text file you about to attach doesn't contain any information that breaks yours or other's privacy (IP addresses, nicks, etc...)

- Please report the problem at https://bugs.launchpad.net/adchpp including the backtrace log as an _attachment_.

TIP: The above procedure is for Windows but you must be able to get backtraces under Linux in a similar way


==== Getting backtrace log from a build compiled with Microsoft Visual C++

You should have Microsoft Visual C\++ installed and you have to use a debug build of ADCH++ compiled with MSVC. MSVC should already be registered as a JIT debugger on your system.
When a crash occurs, just click "debug" on the standard crash dialog and your debugger will handle unwinding the stack, opening the correct file and showing the offending line and instructions.

=== LUA errors

It's possible that you get errors from the running LUA scripts as well. They will show up in the console window of ADCH++ while its running. Example:

	access.lua:491: attempt to concatenate global 'reason' (a nil value)
	stack traceback:
	access.lua:491: in function 'dump_banned'
	access.lua:579: in function <access.lua:496>
	(tail call): ?
	access.lua:1652: in function <access.lua:1651>

If you get errors from the core LUA scripts packaged with ADCH++, please report them to the official bug tracker at Launchpad: https://bugs.launchpad.net/adchpp 

TIP: In case of other scripts, its best to report the errors to their respective authors if they're indentifyable

== Extension Support

The current version of ADCH++ supports the following http://adc.sourceforge.net/ADC-EXT.html[ADC protocol extensions]:

*BLOM* - this extension that allows hub software to create a map (bloom filter) of the shared files on the hub, but with minimal effort, e.g. the hub doesn't keep a list of files, but a filter that never produces false negatives but only possible false positives. This can potentially save bandwidth and effort on the client side. +
*UCMD* - User commands are used to send hub-specific commands to the client which provide useful shortcuts for the user. +
*ADCS* - ADCS is an extension that has the goal of adding the TLS/SSL layer just over the TCP layer and beneath the application layer (where ADC runs). This way, the ADC protocol remains unchanged while the connections are encrypted. +
*PING* - This extension can be supported by both clients and hubs, and when present, if hub supports it, it must send additional information to the client. +
*FO* - If a hub goes down, the client's only option is to keep re-trying the last known hub address. This extension will add a list of failover hub addresses, field FO, that the client can try to connect to, if the main hub address fail. +

== Compiling ADCH++

These are the minimum versions of tools required to compile ADCH++:
    
	* GCC 4.4.x (for Windows: <http://www.mingw.org>) or Microsoft Visual C++ 10 (2010)
    * SCons 1.2.0 or later http://www.scons.org
    * SWIG 1.3.40 or later http://www.swig.org
    * Optional: Python 2.4.x or later http://www.python.org
	* Optional: Ruby 1.9.2 (http://www.ruby-lang.org)
	* Optional: PHP 5 (http://www.php.net/)
    * Optional: OpenSSL http://www.openssl.org (to have support for secure connections)
    * Optional: AsciiDoc http://www.methods.co.nz/asciidoc/ (to build the documentation)

=== Building ADCH++
To build ADCH++ from source you have to:

* Install SWIG and ensure it's in your PATH
* Install Python and ensure it's in your PATH
* Install SCons and ensure it's in your PATH
* Windows with MinGW: Install MinGW and ensure it's in your PATH
* Linux: Install GCC and appropriate header files, in particular, these packages spring to mind:
	** gcc-c++
	** libstdc++-devel
	** redhat: readline-devel, debian: libreadline-dev
	   sys-libs/readline
* To compile with support for secure connections, you need OpenSSL:
	** Windows: compile it yourself (or ask someone to do it) and put it in the "openssl" directory. append a 'd' to debug libs and put x64 / ia64 libs into openssl/lib/x64 / openssl/lib/ia64 respectively.
	** Linux: if you don't have it already, get the openssl-devel/libssl-dev package
* In the source folder, type "scons -h" to see additional compile options
* Type "scons" to create a debug build. "scons mode=release" will create a
  release build (see examples below).

==== Building ADCH++ with MinGW

To build a debug version use: +scons+

To build a release version use: +scons mode=release+

==== Building ADCH++ with MSVC

To build a x86 debug version use: +scons tools=default+

To build a x86 release version use: +scons tools=default mode=release+

To build a x64 debug version use: +scons tools=default arch=x64+

To build a x64 release version use: +scons tools=default mode=release arch=x64+


==== Building documentation
To generate html documentation use: +scons docs=1+

== Patches and contributions

The author do accept patches in general for every part of the application, but in order to avoid future licensing issues, you're asked to give the author the copyright over any submitted code. Make sure that the code doesn't break support for any of the platforms supported and that it looks more or less like the rest of the code (indent, names etc). Patches should be sent to the https://sourceforge.net/mailarchive/forum.php?forum_name=dcplusplus-devel[dcplusplus-devel mailing list] or to https://bugs.launchpad.net/adchpp[the official bug tracker at Launchpad]. Please use unified patches against latest bzr trunk (ie. bzr diff) and supply a description of what the patch does.

== Appendix

This document is published under http://www.gnu.org/copyleft/fdl.html[GNU FDL]

Copyright (C) 2010-2011 Jacek Sieka

Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is available at http://www.gnu.org/copyleft/fdl.html 

////////////////////////////////////////////////////////////////
Changelog: 
0.1.0: Initial Documentation
0.2.0: Updated corresponding to ADCH++ version 2.7.0 (emtee)
0.3.0: Improvements, added MinGW crash report guide, updated corresponding to ADCH++ version 2.8.0 (emtee)
////////////////////////////////////////////////////////////////
// vim: set syntax=asciidoc:
