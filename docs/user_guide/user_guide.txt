= Getting started with ADCH++ 
Author: Toast <toast@adcportal.com> 
Document Version 0.2.7
////
0.1 
* Inital Documentation
0.2 
*Changed Image
*Added Example
0.2.1
*Removed manual TOC for generated TOC along with icon fixes (asciidoc -a data-uri -a icons -a toc -a max-width=55em user_guide.txt)
*Removed Logo
*Removed some unnecessary pictures of the installer
*Rewrote lua script and installation part
0.2.2
*Added more documentation over new features
*Added more detailed information about how to add it as a Windows service
0.2.3
*Updated corresponding to 2.5.1
0.2.4
*Added icons for specific OS parts
*Fixed a miss for ptokax api
*Various updates to sections thats outdated or needs a touch up
0.2.5
*Spellcheck FTW
0.2.6
*Updated compile requirements
0.2.7
*Updated corresponding to 2.5.5 (emtee)
*Fixed typos, clear up some things (emtee)
////

This document contains a quick rundown of features and basic steps needed to make ADCH++ up and running.

== Installation

First of all you have to choose whether to run a debug or a release build of ADCH\+\+. For normal usage choose release builds, they are available for download in the offical ADCH\+\+ home page (links below). If you want to participate of testing and bug reporting or just want to help making ADCH++ better then its best to run any of the debug builds available at http://builds.adcportal.com/.
The difference between a debug and release build is the following:  

    * Debug builds are bigger and slightly slower as they contain additional information for debugging
    * The output of a debug build is more verbose as it shows the software and the protocol at work (like session ids, messages, etc.)
    * In case of problems (crashes, abnormal behaviour) debug builds can provide vital information for the developers
    
_This is how the output of a debug build looks_

image:images/img_adchpp_debug_build.png[]

_This is how the output of a release build looks_

image:images/img_adchpp_release_build.png[]

=== Download

ADCH\++ setup files can be found at the Sourceforge web site located at http://sourceforge.net/projects/adchpp/. 
On that page there are links to the ADCH++ distribution files:

    * Installer - a complete installer EXE file for Windows with uninstaller option.
    * ZIP file - contains the Windows pre-compiled binaries, scripts and configuration files.
    * Source - an archive with the source code of the current distribution for other operating systems and for those that want to compile themselves 

=== Installation on Windows

If you use the ZIP archived binaries then you can skip this part. If you choose the installer and feel uncertain here is a little help section.

The installation consists of three main screens.

. Welcome Screen
. License Screen
. Installation Path
. Query asking if you want to install ADCH++ as a service or not.

CAUTION: on Windows Vista and Windows 7 you should not install ADCH\+\+ to the Program files / Program files(x86) directory if you don't know how to workaround UAC Data Redirection and store configuration files with http://vistaonwindows.com/environment_variables.html[windows environment variables]. If you feel this too hard for you then just install/unpack ADCH\+\+ to another folder where UAC rules don't apply. A good alternative path is: _c:\Users\<Your Account>\_

The difference between installing ADCH\+\+ as a program or as a service is that if it runs in program mode you'll always see its console window. Program mode can be an advantage as you are always able to see the hub is there, up and running. On the contrary, as the console window cannot be closed (only minimized) it will be always there in your taskbar what could be annoying for some users. 
If ADCH\+\+ running in service mode then there's no any window and it only outputs to its log file only. You'll find detailed information about running ADCH++ in service mode later in this guide.

=== Installing on Linux 

Here is a example on how you can install ADCH++ on Linux. The example is for Linux distributions.

.Step 1

To get the source via wget, run the following command in console:

 wget https://sourceforge.net/projects/adchpp/files/Releases/ADCH%2B%2B%202.5/2.5.1/adchpp_2.5.1_source.tar.gz/download 

.Step 2
Then you need to install the following tools in order to compile ADCH++. Debian based systems use `apt-get` while RedHat systems use `yum`.

[width="100%"]
|==========================	
|*Debian*|python|scons|swig|gcc-c++|openssl-dev|readline-dev
|*Redhat*|python|scons|swig|gcc-c++|openssl-devel|readline-devel
|==========================

.Step 3
-----------------------------------------------------
<1> cd adchpp
<2> scons
<3> cd build/release-default/bin/
<3> mkdir config
<3> mkdir scripts
<4> cp -rf plugins/Script/examples build/release-default/bin/scripts
<4> cp -rf etc/ build/release-default/bin/config
<5> /.adchppd
-----------------------------------------------------
 
. Enter the ADCH++ directory.
. Start the compile of ADCH++.
. Enter the bin dir and create two folders.
. Copy files to bin folder.
. Start ADCH++.
 
== Basic configuration

=== MOTD (Message of the day)

The MOTD is stored within motd.txt so enter your text into it and it will show upon login for everyone who enters your hub.

=== Server settings

All the settings for ADCH\++ is stored in the config folder in ADCH++. Open up adchpp.xml in a text editor (such as Notepad) and start changing values as you wish.

TIP: Linux users should enable the following line in adchpp.xml <!--Plugins Path="/home/arnetheduck/adchpp/lib/adchpp/"--> by removing !-- and -- from the line and editing the path according to the actual adchpp directory.

=== Setting up the port to connect to

Add a new <Server/> entry to adchpp.xml with the port you wish you to run your hub on. You must put this line into the Servers part between the <Servers> and </Servers> nodes.

Example:

	<Servers>
		<Server Port="2113"/>
	</Servers>

In this example you will use address adc://yourdomain:2113 to connect to your hub.

=== Using Transport Layer Security (TLS)

To make users able to connect securely to your hub (ADCS connections), set TLS="1" and define the following (preferably absolute)
paths: Certificate, PrivateKey, TrustedPath, DHParams. An example secure server setting:

Example: insert this to the Server line in adchpp.xml:

	<Server Port="2780" TLS="1" Certificate="certs/cacert.pem" PrivateKey="certs/privkey.pem" TrustedPath="certs/trusted/" DHParams="certs/dhparam.pem"/>

For secure connectivity you must generate security certificates. Simple commands using OpenSSL to generate certificate files used for secure connections:

--------------------------------------
openssl genrsa -out privkey.pem 2048
openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1095
openssl dhparam -outform PEM -out dhparam.pem 1024
--------------------------------------

OpenSSL download for Windows: http://www.slproweb.com/products/Win32OpenSSL.html

OpenSSl for Linux Debian/Ubuntu:
--------------------------------------
sudo install apt-get openssl
--------------------------------------
OpenSSl for Linux Redhat:
--------------------------------------
yum install openssl
--------------------------------------

Alternatively, you can use a certificate generator script available at:

http://launchpadlibrarian.net/31960965/Cert_Generator.7z
or
http://builds.adcportal.com/adchpp/cert_generator/adchpp_cert_generator.7z

TIP: Remember that if you have specified TLS=1 in the config users need to connect to your hub using the prefix adcs:// added to the hub address (adcs://yourdomain:port). You can open more than one ports for your hub by adding more <Server/> entries. You can even mix secure and unsecure (non-TLS) port connections by adding TLS=1 parameter to a particular <Server/> entry only.
	
=== Additional settings

There are also additional settings and rules that can only be enabled via hub commands (which are stored in settings.txt) Later in this guide you will see how to modify them.

== Accounts

All the user accounts are stored in users.txt. Now we explain you how to create a user account for yourself. Start up the hub, log in and enter:

	+regme <your desired password>

.Example: Register
--------------------------------------
[09-10-02][21:37:19] *** Connecting to adc://somehub.com:411
[09-10-02][21:37:19] *** Connected
[09-10-02][21:37:19] <ADCH++> MOTD content goes here
[09-10-02][21:37:56] <Testuser> +regme test
[09-10-02][21:37:26] <ADCH++> You're now registered
--------------------------------------

Stop the hub. In order to set this first reg as an admin account open up users.txt in a text editor.

.Example: users.txt
--------------------------------------
[{"password":"test","nick":"Testuser","level":1,"cid":"ABCDEFGHIJ1KLMNOPQRSTUVXYZA23BCDEFGHIJK"}]
--------------------------------------

.Change user level to eg. 10:
--------------------------------------	
[{"password":"test","nick":"Testuser","level":10,"cid":"ABCDEFGHIJ1KLMNOPQRSTUVXYZA23BCDEFGHIJK"}]
--------------------------------------

Save the file, start the hub, reconnect and now you will have access to all the administrator commands so you can register new administrators, operators and users. Use the command:
--------------------------------------
+regnick <nick> <password> <level>
--------------------------------------	

Profiles range are from 1-infinite. By default level 2 and higher users are operators:

. registered at the hub
. registered as a op

== Scripts

Scripts can be added by editing scripts.xml stored in the config folder. The scripts themselves are stored in the Scripts folder. 

How to turn off scripts in scripts.xml:

.Example: scripts.xml
--------------------------------------
<Script>motd.lua</Script>
--------------------------------------

Change to:
--------------------------------------
<!--Script>motd.lua</Script-->
--------------------------------------

or delete the line

IMPORTANT: Linux users shoud use absolute path's point to the script folder in script entries.

=== Making new scripts
In order to help scripters get a clue of how ADCH++ interacts with lua we made an example file thats included in this document.

--------------------------------------
-- This is an example script that scripters might want to use as a basis for their work. It
-- documents the bare minimum needed to make an Lua script interface with ADCH++.

-- For more detailed information, peeking into other, more evolved (but less documented) example
-- scripts as well as the Doxygen documentation of ADCH++ <http://adchpp.sourceforge.net/doc> would
-- be a good idea.

-- Generally, to reach member "bar" of the class "foo" of ADCH++, one has to use: adchpp.foo_bar.
-- Examples: adchpp.Util_getCfgPath(), adchpp.AdcCommand_CMD_MSG, adchpp.Entity_STATE_NORMAL...

-- When manipulating Entity objects, it can be useful to convert them to Client objects (which
-- are aware of socket features such as a send method) by using:
-- local client = entity:asClient()

-- Feel free to use <https://answers.launchpad.net/adchpp> or <www.adcportal.com> if you need help.

-- The global functions of Lua are privately imported into "base"; therefore, be sure to always
-- reference it when calling these functions; eg base.print("blah"), base.pcall(protected_func)...
local base = _G

module("example") -- Give each module a unique name so they don't clash.

-- Import the ADCH++ Lua DLL (luadchpp.dll).
base.require('luadchpp')
local adchpp = base.luadchpp

-- Import various base sets of Lua methods. Only import those you need for your specific module.
local io = base.require('io')
local math = base.require('math')
local os = base.require('os')
local string = base.require('string')
local table = base.require('table')

-- Import some utilitary Lua Scripts; these don't need to be explicitly loaded by ADCH++ (eg if
-- using the adchppd daemon, they don't need to be referenced in Scripts.xml).
local autil = base.require('autil')
local json = base.require('json')

-- Cache pointers to some managers of ADCH++ that we frequently use.
local cm = adchpp.getCM() -- ClientManager
local pm = adchpp.getPM() -- PluginManager

-- Listeners to connect to ADCH++. Define one unique identifier for each listener (i chose to call
-- them example_1, example_2 and so on) to make sure the variable holding the listener doesn't get
-- collected by Lua's garbage collector until the program is over.

-- ClientManager::signalConnected: called after an Entity entity has connected.
example_1 = cm:signalConnected():connect(function(entity)
	-- Process signalConnected here.
end)

-- ClientManager::signalReceive: called when an AdcCommand cmd is received from Entity entity.
example_2 = cm:signalReceive():connect(function(entity, cmd, ok)
	local res = function(entity, cmd, ok)
		if not ok then
			return ok
		end
		-- Process signalReceive here.
		-- Return true to let the command be dispatched, false to block it.
	end
	if not res then
		cmd:setPriority(adchpp.AdcCommand_PRIORITY_IGNORE)
	end
	return res
end)

-- ClientManager::signalState: called after the state of an online Entity entity has changed.
example_3 = cm:signalState():connect(function(entity)
	-- Process signalState here.
end)

-- ClientManager::signalDisconnected: called after an Entity entity has disconnected.
example_4 = cm:signalDisconnected():connect(function(entity)
	-- Process signalDisconnected here.
end)

-- PluginManager::getCommandSignal(string): called when a +command managed by another plugin is
-- being executed.
example_5 = pm:getCommandSignal("blah"):connect(function(entity, list, ok)
	if not ok then
		return ok
	end
	-- Process getCommandSignal here.
	-- Return true to let the command be executed, false to block it.
end)
--------------------------------------

This example file is also available in the distribution.

NOTE: Additional scripting documentation can be found at (http://adchpp.sourceforge.net/). Anyone who wishes to contribute scripts for ADCH\++ submit new scripts either to (https://bugs.launchpad.net/adchpp) or to (http://www.adcportal.com). ADCH++ supports LUA 5.1.4 (http://www.lua.org/docs.html).

=== Using PtokaX scripts in ADCH++

Its possible to create or run existing PtokaX API2 LUA scripts in your hub via Adchpp-Ptokax bridge available at (https://launchpad.net/adchpp-ptokax). Adchpp-Ptokax is still under development and the whole Ptokax LUA API isn't imported yet but most of the existing scripts should work well. Make sure you use the latest revision of Ptokax bridge to get the most out of it.

A sample of how the folder structure can look on a px bridge installation:
--------------------------------------

Directory of c:\users\username\adchpp\Scripts

2010-05-27  18:01    <DIR>          .
2010-05-27  18:01    <DIR>          ..
2010-05-03  22:58            58 383 access.lua
2010-05-26  17:26            33 141 adchpp-ptokax.lua
2010-05-03  22:58             2 653 autil.lua
2010-05-03  22:58             3 699 example.lua
2010-05-03  22:58             3 003 history.lua
2010-05-03  22:58            15 808 json.lua
2010-05-03  22:58               742 motd.lua
2010-05-27  18:01    <DIR>          px
               8 File(s)        117 544 bytes

 Directory of c:\users\username\adchpp\Scripts\px

2010-05-27  18:01    <DIR>          .
2010-05-27  18:01    <DIR>          ..
2010-05-26  19:14             4 652 px_lastip.lua
2010-05-26  18:06            15 158 px_record.lua
2010-05-26  18:02             3 935 px_tagcheck.lua
2007-12-23  12:51            13 312 px_tophubbers.lua
2010-05-26  17:50             5 918 px_topshare.lua
               5 File(s)         62 491 bytes
--------------------------------------

You can load PtokaX scripts inside the hub via brige user commands (right-click menu). You will be asked where to load the scripts from. The default location is the Scripts folder so if you have the scripts in a subdirectory like in the example above then you can simply load them by typing (px/example_script.lua) and then hitting enter.
The bridge will create a file named adchpp-ptokax.txt in the Config directory of ADCH++ what lists the currently added scripts as a list of their names and path. You can edit the file to load multiple scripts in one go like in the following example (your structure may differ):

--------------------------------------
px\px_banner.lua
px\px_iprange.lua
px\px_change.lua
px\px_request.lua
px\px_rotating.lua
px\px_lastip.lua
px\px_rlsbot.lua
px\px_minchecker.lua
px\px_userdb.lua
px\px_pmfilter.lua
px\px_test.lua
px\px_profiles.lua
px\px_pmblock.lua
px\px_clock.lua
px\px_badsearch.lua
--------------------------------------

In case of any lua script requires luafilesystem or socket library (like the lua script FreshStuff or Feedwatch) here is how to configure it: Move the lua5.1.dll and lua5.1.dll.manifest from the pxbridge distribution to the bin folder and the lfs.dll and lfs.dll.manifest to the lib folder where the script looks for it. Make sure you use the .dlls corresponding the compiler your ADCH\+\+ compiled with (if you use the original ADCH\+\+ distibution then its release-mingw-x86). 
Lets take Freshstuff script as an example. Just add the script as you would normally do with any scripts. The rest content of the dir:

--------------------------------------
Directory of c:\users\username\adchpp\Scripts\px

2010-05-27  18:08    <DIR>          .
2010-05-27  18:08    <DIR>          ..
2010-05-26  18:31    <DIR>          freshstuff
2010-05-26  18:14             1 815 freshstuff.lua
2010-05-26  19:16            19 516 px_feedwatch.lua
2010-05-26  19:14             4 652 px_lastip.lua
2010-05-26  18:06            15 158 px_record.lua
2010-05-26  18:02             3 935 px_tagcheck.lua
2007-12-23  12:51            13 312 px_tophubbers.lua
2010-05-26  17:50             5 918 px_topshare.lua
               7 File(s)         64 306 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff

2010-05-26  18:31    <DIR>          .
2010-05-26  18:31    <DIR>          ..
2010-05-26  18:14    <DIR>          components
2010-05-26  18:14    <DIR>          config
2010-05-26  18:15    <DIR>          data
2010-05-26  18:14    <DIR>          docs
2010-05-26  18:14            24 155 kernel.lua
2010-05-26  18:42    <DIR>          lib
2010-05-26  18:14            12 010 ptokax.lua
2010-05-26  18:14             5 775 tables.lua
               3 File(s)         41 940 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\components

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14             3 503 extras.lua
2010-05-26  18:14            14 072 requester.lua
               2 File(s)         17 575 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\config

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14               987 extras.lua
2010-05-26  18:14             3 182 main.lua
2010-05-26  18:14               374 requester.lua
               3 File(s)          4 543 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\data

2010-05-26  18:15    <DIR>          .
2010-05-26  18:15    <DIR>          ..
2010-05-26  18:15               125 categories.dat
               1 File(s)            125 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\docs

2010-05-26  18:14    <DIR>          .
2010-05-26  18:14    <DIR>          ..
2010-05-26  18:14             1 471 customprofile.txt
2010-05-26  18:14             4 350 development.txt
2010-05-26  18:14               201 INSTALL.txt
2010-05-26  18:14            16 755 license.txt
2010-05-26  18:14               735 README.txt
2010-05-26  18:14               644 TODO.txt
               6 File(s)         24 156 bytes

 Directory of c:\users\username\adchpp\Scripts\px\freshstuff\lib

2010-05-26  18:42    <DIR>          .
2010-05-26  18:42    <DIR>          ..
2010-05-13  16:14            13 824 lfs.dll
2010-05-13  16:14               616 lfs.dll.manifest
2010-05-26  18:14           138 240 PXLFS.dll
2010-05-26  18:14           262 144 PXLFS.tds
               4 File(s)        414 824 bytes
--------------------------------------

== Working with hub commands

A simple way to find out how commands work is by typing +help <command>. To see what additional configuration variables are available and what are their current value you should type

.Example: get list of possible configuration variables
--------------------------------------
+help cfg
--------------------------------------

List of all settings variables:

	address - current value: 192.168.0.10 - host address (DNS or IP) (aliases: dns, host)
	allownickchange - current value: 1 - authorize regged users to connect with a different nick, 1 = alllow, 0 = disallow
	allowreg - current value: 1 - authorize un-regged users to register themselves with +mypass (otherwise, they'll have to ask an operator), 1 = alllow, 0 = disallow (aliases: allowregistration)
	botcid - current value: DCL4JDMGMJIC6H3OM3B36XXJHEFWVLU6XF5D37Y - CID of the bot, restart the hub after the change (aliases: botid)
	botdescription - current value: just a bot - description of the hub bot (aliases: botde, botdescr)
	botemail - current value: bot@nospam.org - e-mail of the hub bot (aliases: botem, botmail)
	botname - current value: -bot- - name of the hub bot (aliases: botni, botnick)
	description - current value: just a description - hub description (aliases: hubdescription)
	history_default - current value: 50 - number of messages to display in +history if the user doesn't select anything else
	history_max - current value: 500 - number of messages to keep for +history
	history_prefix - current value: [%Y-%m-%d %H:%M:%S]- prefix to put before each message in +history
	maxhubscount - current value: 0 - maximum number of connected hubs allowed, 0 = disabled (aliases: maxhubs)
	maxhubslotratio - current value: 0 - maximum hub/slot ratio allowed, 0 = disabled (aliases: maxhsr)
	maxmsglength - current value: 0 - maximum number of characters allowed per chat message, 0 = no limit (aliases: maxmessagelength)
	maxnicklength - current value: 50 - maximum number of characters allowed per nick, 0 = no limit
	maxsharesize - current value: 0 - maximum share size allowed in bytes, 0 = disabled (aliases: maxss)
	maxslots - current value: 0 - maximum number of opened upload slots allowed, 0 = disabled (aliases: maxsl)
	maxusers - current value: -1 - maximum number of non-registered users, -1 = no limit, 0 = no unregistered users allowed (aliases: max_users, user_max, usermax, users_max, usersmax)
	menuname - current value: MyHub - title of the main user command menu sent to clients (aliases: ucmdname)
	minchatlevel - current value: 0 - minimum level to chat - hub restart recommended
	mindownloadlevel - current value: 0 - minimum level to download - hub restart recommended (aliases: mindllevel, mintransferlevel)
	minhubslotratio - current value: 0 - minimum hub/slot ratio required, 0 = disabled (aliases: minhsr)
	minsearchlevel - current value: 0 - minimum level to search - hub restart recommended
	minsharesize - current value: 0 - minimum share size allowed in bytes, 0 = disabled (aliases: minss)
	minslots - current value: 0 - minimum number of opened upload slots required, 0 = disabled (aliases: minsl)
	name - current value: Just a hub - hub name (aliases: hubname)
	network - current value: Just a network
	owner - current value: Just an owner - owner name (aliases: ownername)
	passinlist - current value: 1 - show passwords of users with a lower level in +listregs, 1 = show, 0 = don't show
	sendversion - current value: 1 - send hub version information at login, 1 = alllow, 0 = disallow (aliases: displayversion)
	topic - current value: Just a topic - hub topic: if set, overrides the description for normal users; the description is then only for use by hub-lists (aliases: hubtopic)
	website - current value: www.somesite.net(aliases: url)

To change any value use

.Example: Change a configuration variable
--------------------------------------
+cfg name value
--------------------------------------

The all settings above stored in settings.txt file resides in the Config dir of your ADCH++ installation.

=== Setting the hub to private

Here is how you set your hub to private so that registered users can access only:

.Example: Configuration Example
--------------------------------------
+cfg maxusers 0
--------------------------------------

The variable "maxusers" has the following description:

  maxusers - current value: -1 - maximum number of non-registered users, -1 = no limit, 0 = no unregistered users allowed

When the hub is set to registered users only the connecting unregistered users will receive the following message:

.Example: Connection Attempt (if not registred at the hub)
--------------------------------------
[09-10-02][22:07:09] <ADCH++> Only registered users are allowed in here
--------------------------------------

=== Setting the hub to register to chat/search/download

Its possible to restrict guest (unregistered) users to be able to chat/search/download until they get registered by an operator or by using the following command:

.Example: Self-Register
--------------------------------------
+regme <password>
--------------------------------------

From ADCH++ version 2.5.1 setting up download/chat/search rules is pretty easy. You are just a few simple commands away to set these rules up:	

.Example: Configuration Example
--------------------------------------
+cfg minchatlevel <value>
+cfg mindownloadlevel <value>
+cfg minsearchlevel <value>
--------------------------------------

* minchatlevel - current value: 0 - minimum level to chat - hub restart recommended
* mindownloadlevel - current value: 1 - minimum level to download - hub restart recommended (aliases: mindllevel, mintransferlevel)
* minsearchlevel - current value: 1 - minimum level to search - hub restart recommended

=== Automatic spam protection: working with banmsgre

Banmsgre is a very powerful tool for getting rid of unwanted spam. It uses regular expressions for detecting unwanted chat content in your hub. It requires the knowledge of how to write a regular expression string so this command might not be for the beginners.

  +banmsgre <regexp> <reason> <time>
 
.Example: Command Example
--------------------------------------
+banmsgre <http://www\.spam\.com> unwanted spam 99
--------------------------------------

For more information about regular expressions go to this site:
http://www.regular-expressions.info/

== Running ADCH++ with parameters

This part is a quick run thrugh of how to install ADCH++ as a service module instead of an application.

.Example: Command usage
--------------------------------------	
Usage: adchpp [[-c <configdir>] [-d]] | [-v] | [-h]
--------------------------------------	
	
* -c specifies a path to configuration directory
* -d deamon service _(Linux only)_
* -i service mode _(Windows only)_
* -v version number
* -h help message

.Example: Varible Example
--------------------------------------	
(Linux)		adchppd -c /home/test/adchpp/bin/config/
(Linux)		adchppd -d
(Windows)	adchppd.exe -c c:/users/test/adchpp/bin/config/
(Windows)	adchppd.exe -i adchpp
--------------------------------------	

Installing ADCH++ as a service requires to be run in an elevated state in Windows 7 or Vista as UAC will interfere with the process if its not executed as an administrator. Lets see how do you elevate adchpp.exe in Windows 7/Vista:

.How it would look if it fails

image:images/img_adch_elevated_fail.png[]

* Right click on the application
* Choose properties
* Go to compatibility tab

image:images/img_adch_elevated_howto.png[]

* Now execute the command adchpp - i <servicename> (example: adchpp.exe -i myserver) in your adchpp folder
* Grant the application access if you have UAC enabled


To verify that the installation of the service was successful you can check what services are installed via Control Panel\System and Security\Administrative Tools (or you simply run services.msc command from a Windows prompt).

image:images/img_adch_service_location.png[]

To check if adchpp service is running start the "services" application in administrative tools:

image:images/img_adch_service_verify.png[]
	
== Issues and problems
There's no perfect software all of them have some flaws, can preform wierd or have unwanted features. Its very important to make the developer aware of such problems. If you want to help improving ADCH\+\+ you can do so by giving feedback to the developers about found bugs helping them to recreate and fix the problems. To be able to help you must run a debug build of ADCH\+\+. If you cannot compile ADCH\+\+ in debug mode you can download nightly debug builds from http://builds.adcportal.com

=== Hub crash (core dumps)

==== If you run an MSVC compiled debug build

In the event of a total crash the hubsoftware generates file called adchppd.RPT in folder where the binary is located, here is how an adchppd.RPT may look like:

	Error occured on Sunday, September 27, 2009 at 11:08:23.

	H:\BZR Stuff\adchpp\build\release-mingw\bin\adchppd.exe caused a Breakpoint at location 6905059f in module H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll.

	Registers:
	eax=00000080 ebx=02bffca0 ecx=76740849 edx=00000000 esi=69059b05 edi=02bffcd7
	eip=6905059f esp=02bffc94 ebp=02bffd1c iopl=0         nv up ei pl nz na pe nc
	cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202

	Call stack:
	6905059F  H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll:6905059F  __w32sp_grab  ../../../../gcc-4.4.1/libgcc/../gcc/config/i386/w32-sharedptr.c:15
	6904F764  H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll:6904F764  _Unwind_SjLj_Register  ../../../../gcc-4.4.1/libgcc/../gcc/unwind-sjlj.c:169
	69041657  H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll:69041657  __tcf_1  c:/dev tools/mingw/bin/../lib/gcc/mingw32/4.4.1/include/c++/bits/basic_string.h:281
	69041086  H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll:69041086BFD 2.13.90 20030111 assertion fail ../../src/bfd/libbfd.c:584Dwarf Error: found dwarf version '56067', this reader only handles version 2 information.
	69041106  H:\BZR Stuff\adchpp\build\release-mingw\bin\Bloom.dll:69041106
	77C097C0  C:\Windows\SysWOW64\ntdll.dll:77C097C0  RtlQueryEnvironmentVariable
	77C1DCE2  C:\Windows\SysWOW64\ntdll.dll:77C1DCE2  LdrShutdownProcess
	77C1DB84  C:\Windows\SysWOW64\ntdll.dll:77C1DB84  RtlExitUserProcess
	7625699E  C:\Windows\syswow64\kernel32.dll:7625699E  AttachConsole
	761B3677  C:\Windows\syswow64\kernel32.dll:761B3677  BaseThreadInitThunk
	77C09D72  C:\Windows\SysWOW64\ntdll.dll:77C09D72  RtlInitializeExceptionChain
	77C09D45  C:\Windows\SysWOW64\ntdll.dll:77C09D45  RtlInitializeExceptionChain

TIP: Always submit adchppd.RPT to the bugtracker located at launchpad https://bugs.launchpad.net/adchpp

==== If you run MinGW compiled debug build

Follow the DC\+\+ backtrace reporting procedure at https://answers.launchpad.net/dcplusplus/+faq/337 you can get backtrace logs for ADCH\+\+ crashes in the very similar way. Please report the problem at https://bugs.launchpad.net/adchpp including the backtrace log as an attachment.

=== LUA errors

Sometimes lua scripts can preform errors and they will show up in the console window of ADCH++ while its running. Example:

	access.lua:491: attempt to concatenate global 'reason' (a nil value)
	stack traceback:
	access.lua:491: in function 'dump_banned'
	access.lua:579: in function <access.lua:496>
	(tail call): ?
	access.lua:1652: in function <access.lua:1651>

TIP: If you get similar errors while running your hubsoft do report them at the official bug tracker at launchpad https://bugs.launchpad.net/adchpp

=== Missing dlls

If you're using MSVC builds you might get an error message that certain DLL files are missing. There is a simple solution you need to download and install Microsoft Visual C++ Runtime packages.

http://www.microsoft.com/downloads/details.aspx?familyid=A5C84275-3B97-4AB7-A40D-3802B2AF5FC2[Microsoft Visual C\++ 2008 SP1 Redistributable Package (x86)]

http://www.microsoft.com/downloads/details.aspx?familyid=BA9257CA-337F-4B40-8C14-157CFDFFEE4E[Microsoft Visual C\++ 2008 SP1 Redistributable Package (x64)]

=== Is something still unclear ?

We have an answer tracker for additional questions at https://answers.launchpad.net/adchpp 

You can additionally use ADCPortal for questions at http://www.adcportal.com as well.

=== Extensions that this hubsoft supports

*BLOM* - this extension that allows hub software to create a map (bloom filter) of the shared files on the hub, but with minimal effort, e.g. the hub doesn't keep a list of files, but a filter that never produces false negatives but only possible false positives. This can potentially save bandwidth and effort on the client side.

*UCMD* - User commands are used to send hub-specific commands to the client which provide useful shortcuts for the user.

*ADCS* - ADCS is an extension that has the goal of adding the TLS/SSL layer just over the TCP layer and beneath the application layer (where ADC runs). This way, the ADC protocol remains unchanged while the connections are encrypted.

NOTE: _ADCS is still in drafting mode so any implementation is still an early draft version not final (13/11/2010)_

== Compiling and testing

This part is not recommended for newbies. This is for novice or expert users and will tell how to compile ADCH++.

Here is a list of minimum versions of recommended tools:
    
	* GCC 4.4.x (for Windows: <http://www.mingw.org>) or Microsoft Visual C++ 10 (2010)
    * SCons 1.0 or later http://www.scons.org
    * SWIG 1.3.40 or later http://www.swig.org
    * Python 2.4.x or later http://www.python.org
    * Optional: OpenSSL http://www.openssl.org (to have support for secure connections)

MinGW Builds

	to build a debug version use: scons
	to build a release version use: scons mode=release

MSVC Builds

	to build a x86 debug version use: scons tools=default
	to build a x86 release version use: scons tools=default mode=release
	to build a x64 debug version use: scons tools=default arch=x64
	to build a x64 release version use: scons tools=default mode=release arch=x64
	
For more information refer to the readme.txt included with the ADCH++ distribution.

=== Right on the bleeding edge

We have an open bzr repository that we use for publishing the source code for ADCH++. Its located at Launchpad https://code.launchpad.net/adchpp

To create a local repository it requires that you have bzr tools installed
http://bazaar-vcs.org/

We also have a build archive for windows users who don't want to install a lot of compile tools, its located at
http://builds.adcportal.com/

== Congratulations!
If you have read this far and successfully followed the instructions, congratulations. You now know the basics of using ADCH\+\+. What has been described on this page is the bare minimum needed to use ADCH++. There are many other features. It is highly recommended that you explore the program and try new functions for yourself. Most of all, enjoy yourself. Good luck and happy sharing.
// vim: set syntax=asciidoc:
